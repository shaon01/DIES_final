/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package robotlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class robotFeedback_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public int speedCurrent;
    public double positionEstimation[];
    public boolean laneRight;
 
    public robotFeedback_t()
    {
        positionEstimation = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x420d853e4b0df0fdL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(robotlcm.robotFeedback_t.class))
            return 0L;
 
        classes.add(robotlcm.robotFeedback_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.speedCurrent); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.positionEstimation[a]); 
        }
 
        outs.writeByte( this.laneRight ? 1 : 0); 
 
    }
 
    public robotFeedback_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public robotFeedback_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static robotlcm.robotFeedback_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        robotlcm.robotFeedback_t o = new robotlcm.robotFeedback_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.speedCurrent = ins.readInt();
 
        this.positionEstimation = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.positionEstimation[a] = ins.readDouble();
        }
 
        this.laneRight = ins.readByte()!=0;
 
    }
 
    public robotlcm.robotFeedback_t copy()
    {
        robotlcm.robotFeedback_t outobj = new robotlcm.robotFeedback_t();
        outobj.timestamp = this.timestamp;
 
        outobj.speedCurrent = this.speedCurrent;
 
        outobj.positionEstimation = new double[(int) 3];
        System.arraycopy(this.positionEstimation, 0, outobj.positionEstimation, 0, 3); 
        outobj.laneRight = this.laneRight;
 
        return outobj;
    }
 
}

